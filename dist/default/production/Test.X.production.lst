

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sun Aug  6 02:23:22 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    16                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    24                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    25   000000                     
    26                           ; Generated 23/03/2023 GMT
    27                           ; 
    28                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution. Publication is not required when
    42                           ;        this file is used in an embedded application.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F2550 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60   000000                     
    61                           	psect	idataCOMRAM
    62   000B38                     __pidataCOMRAM:
    63                           	callstack 0
    64                           
    65                           ;initializer for _response
    66   000B38  74                 	db	116
    67   000B39  65                 	db	101
    68   000B3A  73                 	db	115
    69   000B3B  74                 	db	116
    70   000B3C  5F                 	db	95
    71   000B3D  72                 	db	114
    72   000B3E  00                 	db	0
    73   000B3F  00                 	db	0
    74   000B40  00                 	db	0
    75   000B41  00                 	db	0
    76   000000                     _RCREG	set	4014
    77   000000                     _TXREG	set	4013
    78   000000                     _SPBRG	set	4015
    79   000000                     _SPBRGH	set	4016
    80   000000                     _BAUDCON	set	4024
    81   000000                     _PIE1bits	set	3997
    82   000000                     _TXSTAbits	set	4012
    83   000000                     _PORTBbits	set	3969
    84   000000                     _TRISB	set	3987
    85   000000                     _TRISC	set	3988
    86   000000                     _PIE1	set	3997
    87   000000                     _RCSTA	set	4011
    88   000000                     _TXSTA	set	4012
    89   000000                     _INTCON3	set	4080
    90   000000                     _INTCON2	set	4081
    91   000000                     _INTCON	set	4082
    92   000000                     _PIR1bits	set	3998
    93                           
    94                           	psect	smallconst
    95   000800                     __psmallconst:
    96                           	callstack 0
    97   000800  00                 	db	0
    98   000801                     STR_1:
    99   000801  53                 	db	83	;'S'
   100   000802  54                 	db	84	;'T'
   101   000803  4F                 	db	79	;'O'
   102   000804  50                 	db	80	;'P'
   103   000805  0D                 	db	13
   104   000806  00                 	db	0
   105   000807                     STR_4:
   106   000807  53                 	db	83	;'S'
   107   000808  54                 	db	84	;'T'
   108   000809  52                 	db	82	;'R'
   109   00080A  54                 	db	84	;'T'
   110   00080B  0D                 	db	13
   111   00080C  00                 	db	0
   112   00080D                     STR_3:
   113   00080D  4F                 	db	79	;'O'
   114   00080E  4B                 	db	75	;'K'
   115   00080F  0D                 	db	13
   116   000810  00                 	db	0
   117   000811  00                 	db	0	; dummy byte at the end
   118   000000                     
   119                           ; #config settings
   120                           
   121                           	psect	cinit
   122   000AA0                     __pcinit:
   123                           	callstack 0
   124   000AA0                     start_initialization:
   125                           	callstack 0
   126   000AA0                     __initialization:
   127                           	callstack 0
   128                           
   129                           ; Initialize objects allocated to COMRAM (10 bytes)
   130                           ; load TBLPTR registers with __pidataCOMRAM
   131   000AA0  0E38               	movlw	low __pidataCOMRAM
   132   000AA2  6EF6               	movwf	tblptrl,c
   133   000AA4  0E0B               	movlw	high __pidataCOMRAM
   134   000AA6  6EF7               	movwf	tblptrh,c
   135   000AA8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   136   000AAA  6EF8               	movwf	tblptru,c
   137   000AAC  EE00  F021         	lfsr	0,__pdataCOMRAM
   138   000AB0  EE10 F00A          	lfsr	1,10
   139   000AB4                     copy_data0:
   140   000AB4  0009               	tblrd		*+
   141   000AB6  CFF5 FFEE          	movff	tablat,postinc0
   142   000ABA  50E5               	movf	postdec1,w,c
   143   000ABC  50E1               	movf	fsr1l,w,c
   144   000ABE  E1FA               	bnz	copy_data0
   145                           
   146                           ; Clear objects allocated to COMRAM (17 bytes)
   147   000AC0  EE00  F001         	lfsr	0,__pbssCOMRAM
   148   000AC4  0E11               	movlw	17
   149   000AC6                     clear_0:
   150   000AC6  6AEE               	clrf	postinc0,c
   151   000AC8  06E8               	decf	wreg,f,c
   152   000ACA  E1FD               	bnz	clear_0
   153   000ACC                     end_of_initialization:
   154                           	callstack 0
   155   000ACC                     __end_of__initialization:
   156                           	callstack 0
   157   000ACC  902B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   158   000ACE  922B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   159   000AD0  0E00               	movlw	low (__Lsmallconst shr (0+16))
   160   000AD2  6EF8               	movwf	tblptru,c
   161   000AD4  0E08               	movlw	high __Lsmallconst
   162   000AD6  6EF7               	movwf	tblptrh,c
   163   000AD8  0100               	movlb	0
   164   000ADA  EF89  F005         	goto	_main	;jump to C main() function
   165                           
   166                           	psect	bssCOMRAM
   167   000001                     __pbssCOMRAM:
   168                           	callstack 0
   169   000001                     _tx_buffer:
   170                           	callstack 0
   171   000001                     	ds	10
   172   00000B                     _tx_buffer_ptr:
   173                           	callstack 0
   174   00000B                     	ds	1
   175   00000C                     _rx_buffer_ptr:
   176                           	callstack 0
   177   00000C                     	ds	1
   178   00000D                     _rx_buffer:
   179                           	callstack 0
   180   00000D                     	ds	5
   181                           
   182                           	psect	dataCOMRAM
   183   000021                     __pdataCOMRAM:
   184                           	callstack 0
   185   000021                     _response:
   186                           	callstack 0
   187   000021                     	ds	10
   188                           
   189                           	psect	cstackCOMRAM
   190   000012                     __pcstackCOMRAM:
   191                           	callstack 0
   192   000012                     ?_strncmp:
   193                           	callstack 0
   194   000012                     set_usart_response@res:
   195                           	callstack 0
   196   000012                     strncmp@s1:
   197                           	callstack 0
   198                           
   199                           ; 2 bytes @ 0x0
   200   000012                     	ds	2
   201   000014                     set_usart_response@res_len:
   202                           	callstack 0
   203   000014                     strncmp@s2:
   204                           	callstack 0
   205                           
   206                           ; 2 bytes @ 0x2
   207   000014                     	ds	1
   208   000015                     ??_set_usart_response:
   209                           
   210                           ; 1 bytes @ 0x3
   211   000015                     	ds	1
   212   000016                     strncmp@len:
   213                           	callstack 0
   214                           
   215                           ; 2 bytes @ 0x4
   216   000016                     	ds	1
   217   000017                     set_usart_response@i:
   218                           	callstack 0
   219                           
   220                           ; 1 bytes @ 0x5
   221   000017                     	ds	1
   222   000018                     ??_strncmp:
   223                           
   224                           ; 1 bytes @ 0x6
   225   000018                     	ds	1
   226   000019                     switch_cmd@ptr:
   227                           	callstack 0
   228                           
   229                           ; 2 bytes @ 0x7
   230   000019                     	ds	2
   231   00001B                     ??_tcInt:
   232                           
   233                           ; 1 bytes @ 0x9
   234   00001B                     	ds	6
   235   000021                     
   236                           ; 1 bytes @ 0xF
   237 ;;
   238 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   239 ;;
   240 ;; *************** function _main *****************
   241 ;; Defined at:
   242 ;;		line 75 in file "main.c"
   243 ;; Parameters:    Size  Location     Type
   244 ;;		None
   245 ;; Auto vars:     Size  Location     Type
   246 ;;		None
   247 ;; Return value:  Size  Location     Type
   248 ;;                  1    wreg      void 
   249 ;; Registers used:
   250 ;;		wreg, status,2, cstack
   251 ;; Tracked objects:
   252 ;;		On entry : 0/0
   253 ;;		On exit  : 0/0
   254 ;;		Unchanged: 0/0
   255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   256 ;;      Params:         0       0       0       0       0       0       0       0       0
   257 ;;      Locals:         0       0       0       0       0       0       0       0       0
   258 ;;      Temps:          0       0       0       0       0       0       0       0       0
   259 ;;      Totals:         0       0       0       0       0       0       0       0       0
   260 ;;Total ram usage:        0 bytes
   261 ;; Hardware stack levels required when called: 4
   262 ;; This function calls:
   263 ;;		_interrupt_conf
   264 ;;		_ports_conf
   265 ;;		_usart_conf
   266 ;; This function is called by:
   267 ;;		Startup code after reset
   268 ;; This function uses a non-reentrant model
   269 ;;
   270                           
   271                           	psect	text0
   272   000B12                     __ptext0:
   273                           	callstack 0
   274   000B12                     _main:
   275                           	callstack 27
   276   000B12                     
   277                           ;main.c: 76:     interrupt_conf();
   278   000B12  EC93  F005         	call	_interrupt_conf	;wreg free
   279                           
   280                           ;main.c: 77:     usart_conf();
   281   000B16  EC6F  F005         	call	_usart_conf	;wreg free
   282                           
   283                           ;main.c: 78:     ports_conf();
   284   000B1A  ECA1  F005         	call	_ports_conf	;wreg free
   285   000B1E                     l77:
   286   000B1E  EF8F  F005         	goto	l77
   287   000B22  EF07  F000         	goto	start
   288   000B26                     __end_of_main:
   289                           	callstack 0
   290                           
   291 ;; *************** function _usart_conf *****************
   292 ;; Defined at:
   293 ;;		line 23 in file "main.c"
   294 ;; Parameters:    Size  Location     Type
   295 ;;		None
   296 ;; Auto vars:     Size  Location     Type
   297 ;;		None
   298 ;; Return value:  Size  Location     Type
   299 ;;                  1    wreg      void 
   300 ;; Registers used:
   301 ;;		wreg, status,2
   302 ;; Tracked objects:
   303 ;;		On entry : 0/0
   304 ;;		On exit  : 0/0
   305 ;;		Unchanged: 0/0
   306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   307 ;;      Params:         0       0       0       0       0       0       0       0       0
   308 ;;      Locals:         0       0       0       0       0       0       0       0       0
   309 ;;      Temps:          0       0       0       0       0       0       0       0       0
   310 ;;      Totals:         0       0       0       0       0       0       0       0       0
   311 ;;Total ram usage:        0 bytes
   312 ;; Hardware stack levels used: 1
   313 ;; Hardware stack levels required when called: 3
   314 ;; This function calls:
   315 ;;		Nothing
   316 ;; This function is called by:
   317 ;;		_main
   318 ;; This function uses a non-reentrant model
   319 ;;
   320                           
   321                           	psect	text1
   322   000ADE                     __ptext1:
   323                           	callstack 0
   324   000ADE                     _usart_conf:
   325                           	callstack 27
   326   000ADE                     
   327                           ;main.c: 24:     TRISC = 0x80;
   328   000ADE  0E80               	movlw	128
   329   000AE0  6E94               	movwf	148,c	;volatile
   330                           
   331                           ;main.c: 25:     TXSTA = 0x04;
   332   000AE2  0E04               	movlw	4
   333   000AE4  6EAC               	movwf	172,c	;volatile
   334                           
   335                           ;main.c: 26:     RCSTA = 0x90;
   336   000AE6  0E90               	movlw	144
   337   000AE8  6EAB               	movwf	171,c	;volatile
   338                           
   339                           ;main.c: 27:     BAUDCON = 0x08;
   340   000AEA  0E08               	movlw	8
   341   000AEC  6EB8               	movwf	184,c	;volatile
   342                           
   343                           ;main.c: 28:     SPBRGH = 0x00;
   344   000AEE  0E00               	movlw	0
   345   000AF0  6EB0               	movwf	176,c	;volatile
   346                           
   347                           ;main.c: 29:     SPBRG = 0x67;
   348   000AF2  0E67               	movlw	103
   349   000AF4  6EAF               	movwf	175,c	;volatile
   350   000AF6  0012               	return		;funcret
   351   000AF8                     __end_of_usart_conf:
   352                           	callstack 0
   353                           
   354 ;; *************** function _ports_conf *****************
   355 ;; Defined at:
   356 ;;		line 43 in file "main.c"
   357 ;; Parameters:    Size  Location     Type
   358 ;;		None
   359 ;; Auto vars:     Size  Location     Type
   360 ;;		None
   361 ;; Return value:  Size  Location     Type
   362 ;;                  1    wreg      void 
   363 ;; Registers used:
   364 ;;		wreg, status,2
   365 ;; Tracked objects:
   366 ;;		On entry : 0/0
   367 ;;		On exit  : 0/0
   368 ;;		Unchanged: 0/0
   369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   370 ;;      Params:         0       0       0       0       0       0       0       0       0
   371 ;;      Locals:         0       0       0       0       0       0       0       0       0
   372 ;;      Temps:          0       0       0       0       0       0       0       0       0
   373 ;;      Totals:         0       0       0       0       0       0       0       0       0
   374 ;;Total ram usage:        0 bytes
   375 ;; Hardware stack levels used: 1
   376 ;; Hardware stack levels required when called: 3
   377 ;; This function calls:
   378 ;;		Nothing
   379 ;; This function is called by:
   380 ;;		_main
   381 ;; This function uses a non-reentrant model
   382 ;;
   383                           
   384                           	psect	text2
   385   000B42                     __ptext2:
   386                           	callstack 0
   387   000B42                     _ports_conf:
   388                           	callstack 27
   389   000B42                     
   390                           ;main.c: 44:     TRISB = 0x00;
   391   000B42  0E00               	movlw	0
   392   000B44  6E93               	movwf	147,c	;volatile
   393   000B46  0012               	return		;funcret
   394   000B48                     __end_of_ports_conf:
   395                           	callstack 0
   396                           
   397 ;; *************** function _interrupt_conf *****************
   398 ;; Defined at:
   399 ;;		line 35 in file "main.c"
   400 ;; Parameters:    Size  Location     Type
   401 ;;		None
   402 ;; Auto vars:     Size  Location     Type
   403 ;;		None
   404 ;; Return value:  Size  Location     Type
   405 ;;                  1    wreg      void 
   406 ;; Registers used:
   407 ;;		wreg, status,2
   408 ;; Tracked objects:
   409 ;;		On entry : 0/0
   410 ;;		On exit  : 0/0
   411 ;;		Unchanged: 0/0
   412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   413 ;;      Params:         0       0       0       0       0       0       0       0       0
   414 ;;      Locals:         0       0       0       0       0       0       0       0       0
   415 ;;      Temps:          0       0       0       0       0       0       0       0       0
   416 ;;      Totals:         0       0       0       0       0       0       0       0       0
   417 ;;Total ram usage:        0 bytes
   418 ;; Hardware stack levels used: 1
   419 ;; Hardware stack levels required when called: 3
   420 ;; This function calls:
   421 ;;		Nothing
   422 ;; This function is called by:
   423 ;;		_main
   424 ;; This function uses a non-reentrant model
   425 ;;
   426                           
   427                           	psect	text3
   428   000B26                     __ptext3:
   429                           	callstack 0
   430   000B26                     _interrupt_conf:
   431                           	callstack 27
   432   000B26                     
   433                           ;main.c: 36:     INTCON = 0xC0;
   434   000B26  0EC0               	movlw	192
   435   000B28  6EF2               	movwf	242,c	;volatile
   436                           
   437                           ;main.c: 37:     INTCON2 = 0x00;
   438   000B2A  0E00               	movlw	0
   439   000B2C  6EF1               	movwf	241,c	;volatile
   440                           
   441                           ;main.c: 38:     INTCON3 = 0X80;
   442   000B2E  0E80               	movlw	128
   443   000B30  6EF0               	movwf	240,c	;volatile
   444                           
   445                           ;main.c: 39:     PIE1 = 0x30;
   446   000B32  0E30               	movlw	48
   447   000B34  6E9D               	movwf	157,c	;volatile
   448   000B36  0012               	return		;funcret
   449   000B38                     __end_of_interrupt_conf:
   450                           	callstack 0
   451                           
   452 ;; *************** function _tcInt *****************
   453 ;; Defined at:
   454 ;;		line 85 in file "main.c"
   455 ;; Parameters:    Size  Location     Type
   456 ;;		None
   457 ;; Auto vars:     Size  Location     Type
   458 ;;		None
   459 ;; Return value:  Size  Location     Type
   460 ;;                  1    wreg      void 
   461 ;; Registers used:
   462 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   463 ;; Tracked objects:
   464 ;;		On entry : 0/0
   465 ;;		On exit  : 0/0
   466 ;;		Unchanged: 0/0
   467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   468 ;;      Params:         0       0       0       0       0       0       0       0       0
   469 ;;      Locals:         0       0       0       0       0       0       0       0       0
   470 ;;      Temps:          6       0       0       0       0       0       0       0       0
   471 ;;      Totals:         6       0       0       0       0       0       0       0       0
   472 ;;Total ram usage:        6 bytes
   473 ;; Hardware stack levels used: 1
   474 ;; Hardware stack levels required when called: 2
   475 ;; This function calls:
   476 ;;		_switch_cmd
   477 ;; This function is called by:
   478 ;;		Interrupt level 2
   479 ;; This function uses a non-reentrant model
   480 ;;
   481                           
   482                           	psect	intcode
   483   000008                     __pintcode:
   484                           	callstack 0
   485   000008                     _tcInt:
   486                           	callstack 27
   487                           
   488                           ;incstack = 0
   489   000008  822B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   490   00000A  ED09  F004         	call	int_func,f	;refresh shadow registers
   491                           
   492                           	psect	intcode_body
   493   000812                     __pintcode_body:
   494                           	callstack 27
   495   000812                     int_func:
   496                           	callstack 27
   497   000812  0006               	pop		; remove dummy address from shadow register refresh
   498   000814  CFD9 F01B          	movff	fsr2l,??_tcInt
   499   000818  CFDA F01C          	movff	fsr2h,??_tcInt+1
   500   00081C  CFF6 F01D          	movff	tblptrl,??_tcInt+2
   501   000820  CFF7 F01E          	movff	tblptrh,??_tcInt+3
   502   000824  CFF8 F01F          	movff	tblptru,??_tcInt+4
   503   000828  CFF5 F020          	movff	tablat,??_tcInt+5
   504   00082C                     
   505                           ;main.c: 86:     if(PIE1bits.RCIE && PIR1bits.RCIF){
   506   00082C  AA9D               	btfss	157,5,c	;volatile
   507   00082E  EF1B  F004         	goto	i2u24_41
   508   000832  EF1D  F004         	goto	i2u24_40
   509   000836                     i2u24_41:
   510   000836  EF3F  F004         	goto	i2l85
   511   00083A                     i2u24_40:
   512   00083A  AA9E               	btfss	158,5,c	;volatile
   513   00083C  EF22  F004         	goto	i2u25_41
   514   000840  EF24  F004         	goto	i2u25_40
   515   000844                     i2u25_41:
   516   000844  EF3F  F004         	goto	i2l85
   517   000848                     i2u25_40:
   518   000848                     
   519                           ;main.c: 87:         rx_buffer[rx_buffer_ptr] = RCREG;
   520   000848  0E0D               	movlw	low _rx_buffer
   521   00084A  240C               	addwf	_rx_buffer_ptr^0,w,c
   522   00084C  6ED9               	movwf	fsr2l,c
   523   00084E  6ADA               	clrf	fsr2h,c
   524   000850  0E00               	movlw	high _rx_buffer
   525   000852  22DA               	addwfc	fsr2h,f,c
   526   000854  CFAE FFDF          	movff	4014,indf2	;volatile
   527   000858                     
   528                           ;main.c: 88:         rx_buffer_ptr++;
   529   000858  2A0C               	incf	_rx_buffer_ptr^0,f,c
   530   00085A                     
   531                           ;main.c: 89:         if(rx_buffer_ptr >= 5){
   532   00085A  0E04               	movlw	4
   533   00085C  640C               	cpfsgt	_rx_buffer_ptr^0,c
   534   00085E  EF33  F004         	goto	i2u26_41
   535   000862  EF35  F004         	goto	i2u26_40
   536   000866                     i2u26_41:
   537   000866  EF72  F004         	goto	i2l93
   538   00086A                     i2u26_40:
   539   00086A                     
   540                           ;main.c: 90:             rx_buffer_ptr = 0;
   541   00086A  0E00               	movlw	0
   542   00086C  6E0C               	movwf	_rx_buffer_ptr^0,c
   543   00086E                     
   544                           ;main.c: 91:             switch_cmd(rx_buffer);
   545   00086E  0E0D               	movlw	low _rx_buffer
   546   000870  6E19               	movwf	switch_cmd@ptr^0,c
   547   000872  0E00               	movlw	high _rx_buffer
   548   000874  6E1A               	movwf	(switch_cmd@ptr+1)^0,c
   549   000876  ECCB  F004         	call	_switch_cmd	;wreg free
   550   00087A  EF72  F004         	goto	i2l93
   551   00087E                     i2l85:
   552   00087E  A89D               	btfss	157,4,c	;volatile
   553   000880  EF44  F004         	goto	i2u27_41
   554   000884  EF46  F004         	goto	i2u27_40
   555   000888                     i2u27_41:
   556   000888  EF72  F004         	goto	i2l93
   557   00088C                     i2u27_40:
   558   00088C  A89E               	btfss	158,4,c	;volatile
   559   00088E  EF4B  F004         	goto	i2u28_41
   560   000892  EF4D  F004         	goto	i2u28_40
   561   000896                     i2u28_41:
   562   000896  EF72  F004         	goto	i2l93
   563   00089A                     i2u28_40:
   564   00089A                     
   565                           ;main.c: 94:         PIR1bits.TXIF = 0;
   566   00089A  989E               	bcf	158,4,c	;volatile
   567   00089C                     
   568                           ;main.c: 95:         if(tx_buffer_ptr >= 10 || tx_buffer[tx_buffer_ptr] == '\0'){
   569   00089C  0E0A               	movlw	10
   570   00089E  600B               	cpfslt	_tx_buffer_ptr^0,c
   571   0008A0  EF54  F004         	goto	i2u29_41
   572   0008A4  EF56  F004         	goto	i2u29_40
   573   0008A8                     i2u29_41:
   574   0008A8  EF64  F004         	goto	i2l1022
   575   0008AC                     i2u29_40:
   576   0008AC  0E01               	movlw	low _tx_buffer
   577   0008AE  240B               	addwf	_tx_buffer_ptr^0,w,c
   578   0008B0  6ED9               	movwf	fsr2l,c
   579   0008B2  6ADA               	clrf	fsr2h,c
   580   0008B4  0E00               	movlw	high _tx_buffer
   581   0008B6  22DA               	addwfc	fsr2h,f,c
   582   0008B8  50DF               	movf	indf2,w,c
   583   0008BA  A4D8               	btfss	status,2,c
   584   0008BC  EF62  F004         	goto	i2u30_41
   585   0008C0  EF64  F004         	goto	i2u30_40
   586   0008C4                     i2u30_41:
   587   0008C4  EF69  F004         	goto	i2l1026
   588   0008C8                     i2u30_40:
   589   0008C8                     i2l1022:
   590                           
   591                           ;main.c: 96:             tx_buffer_ptr = 0;
   592   0008C8  0E00               	movlw	0
   593   0008CA  6E0B               	movwf	_tx_buffer_ptr^0,c
   594   0008CC                     
   595                           ;main.c: 97:             TXSTAbits.TXEN = 0;
   596   0008CC  9AAC               	bcf	172,5,c	;volatile
   597                           
   598                           ;main.c: 98:         }else{
   599   0008CE  EF72  F004         	goto	i2l93
   600   0008D2                     i2l1026:
   601                           
   602                           ;main.c: 99:             TXREG = tx_buffer[tx_buffer_ptr];
   603   0008D2  0E01               	movlw	low _tx_buffer
   604   0008D4  240B               	addwf	_tx_buffer_ptr^0,w,c
   605   0008D6  6ED9               	movwf	fsr2l,c
   606   0008D8  6ADA               	clrf	fsr2h,c
   607   0008DA  0E00               	movlw	high _tx_buffer
   608   0008DC  22DA               	addwfc	fsr2h,f,c
   609   0008DE  50DF               	movf	indf2,w,c
   610   0008E0  6EAD               	movwf	173,c	;volatile
   611   0008E2                     
   612                           ;main.c: 100:             tx_buffer_ptr++;
   613   0008E2  2A0B               	incf	_tx_buffer_ptr^0,f,c
   614   0008E4                     i2l93:
   615   0008E4  C020  FFF5         	movff	??_tcInt+5,tablat
   616   0008E8  C01F  FFF8         	movff	??_tcInt+4,tblptru
   617   0008EC  C01E  FFF7         	movff	??_tcInt+3,tblptrh
   618   0008F0  C01D  FFF6         	movff	??_tcInt+2,tblptrl
   619   0008F4  C01C  FFDA         	movff	??_tcInt+1,fsr2h
   620   0008F8  C01B  FFD9         	movff	??_tcInt,fsr2l
   621   0008FC  922B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   622   0008FE  0011               	retfie		f
   623   000900                     __end_of_tcInt:
   624                           	callstack 0
   625                           
   626 ;; *************** function _switch_cmd *****************
   627 ;; Defined at:
   628 ;;		line 63 in file "main.c"
   629 ;; Parameters:    Size  Location     Type
   630 ;;  ptr             2    7[COMRAM] PTR unsigned char 
   631 ;;		 -> rx_buffer(5), 
   632 ;; Auto vars:     Size  Location     Type
   633 ;;		None
   634 ;; Return value:  Size  Location     Type
   635 ;;                  1    wreg      void 
   636 ;; Registers used:
   637 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   638 ;; Tracked objects:
   639 ;;		On entry : 0/0
   640 ;;		On exit  : 0/0
   641 ;;		Unchanged: 0/0
   642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   643 ;;      Params:         2       0       0       0       0       0       0       0       0
   644 ;;      Locals:         0       0       0       0       0       0       0       0       0
   645 ;;      Temps:          0       0       0       0       0       0       0       0       0
   646 ;;      Totals:         2       0       0       0       0       0       0       0       0
   647 ;;Total ram usage:        2 bytes
   648 ;; Hardware stack levels used: 1
   649 ;; Hardware stack levels required when called: 1
   650 ;; This function calls:
   651 ;;		_set_usart_response
   652 ;;		_start_tx
   653 ;;		_strncmp
   654 ;; This function is called by:
   655 ;;		_tcInt
   656 ;; This function uses a non-reentrant model
   657 ;;
   658                           
   659                           	psect	text5
   660   000996                     __ptext5:
   661                           	callstack 0
   662   000996                     _switch_cmd:
   663                           	callstack 27
   664   000996                     
   665                           ;main.c: 64:     if(!strncmp(ptr, "STOP\r", 5)){
   666   000996  C019  F012         	movff	switch_cmd@ptr,strncmp@s1
   667   00099A  C01A  F013         	movff	switch_cmd@ptr+1,strncmp@s1+1
   668   00099E  0E01               	movlw	low STR_1
   669   0009A0  6E14               	movwf	strncmp@s2^0,c
   670   0009A2  0E08               	movlw	high STR_1
   671   0009A4  6E15               	movwf	(strncmp@s2+1)^0,c
   672   0009A6  0E00               	movlw	0
   673   0009A8  6E17               	movwf	(strncmp@len+1)^0,c
   674   0009AA  0E05               	movlw	5
   675   0009AC  6E16               	movwf	strncmp@len^0,c
   676   0009AE  EC80  F004         	call	_strncmp	;wreg free
   677   0009B2  5012               	movf	?_strncmp^0,w,c
   678   0009B4  1013               	iorwf	(?_strncmp+1)^0,w,c
   679   0009B6  A4D8               	btfss	status,2,c
   680   0009B8  EFE0  F004         	goto	i2u22_41
   681   0009BC  EFE2  F004         	goto	i2u22_40
   682   0009C0                     i2u22_41:
   683   0009C0  EFEF  F004         	goto	i2l992
   684   0009C4                     i2u22_40:
   685   0009C4                     
   686                           ;main.c: 65:         PORTBbits.RB0 = 0;
   687   0009C4  9081               	bcf	129,0,c	;volatile
   688   0009C6                     
   689                           ;main.c: 66:         set_usart_response("OK\r", 3);
   690   0009C6  0E0D               	movlw	low STR_3
   691   0009C8  6E12               	movwf	set_usart_response@res^0,c
   692   0009CA  0E08               	movlw	high STR_3
   693   0009CC  6E13               	movwf	(set_usart_response@res+1)^0,c
   694   0009CE  0E03               	movlw	3
   695   0009D0  6E14               	movwf	set_usart_response@res_len^0,c
   696   0009D2  EC12  F005         	call	_set_usart_response	;wreg free
   697   0009D6                     i2l990:
   698                           
   699                           ;main.c: 67:         start_tx();
   700   0009D6  EC7C  F005         	call	_start_tx	;wreg free
   701                           
   702                           ;main.c: 68:     }else if(!strncmp(ptr, "STRT\r", 5)){
   703   0009DA  EF11  F005         	goto	i2l72
   704   0009DE                     i2l992:
   705   0009DE  C019  F012         	movff	switch_cmd@ptr,strncmp@s1
   706   0009E2  C01A  F013         	movff	switch_cmd@ptr+1,strncmp@s1+1
   707   0009E6  0E07               	movlw	low STR_4
   708   0009E8  6E14               	movwf	strncmp@s2^0,c
   709   0009EA  0E08               	movlw	high STR_4
   710   0009EC  6E15               	movwf	(strncmp@s2+1)^0,c
   711   0009EE  0E00               	movlw	0
   712   0009F0  6E17               	movwf	(strncmp@len+1)^0,c
   713   0009F2  0E05               	movlw	5
   714   0009F4  6E16               	movwf	strncmp@len^0,c
   715   0009F6  EC80  F004         	call	_strncmp	;wreg free
   716   0009FA  5012               	movf	?_strncmp^0,w,c
   717   0009FC  1013               	iorwf	(?_strncmp+1)^0,w,c
   718   0009FE  A4D8               	btfss	status,2,c
   719   000A00  EF04  F005         	goto	i2u23_41
   720   000A04  EF06  F005         	goto	i2u23_40
   721   000A08                     i2u23_41:
   722   000A08  EF11  F005         	goto	i2l72
   723   000A0C                     i2u23_40:
   724   000A0C                     
   725                           ;main.c: 69:         PORTBbits.RB0 = 1;
   726   000A0C  8081               	bsf	129,0,c	;volatile
   727   000A0E                     
   728                           ;main.c: 70:         set_usart_response("OK\r", 3);
   729   000A0E  0E0D               	movlw	low STR_3
   730   000A10  6E12               	movwf	set_usart_response@res^0,c
   731   000A12  0E08               	movlw	high STR_3
   732   000A14  6E13               	movwf	(set_usart_response@res+1)^0,c
   733   000A16  0E03               	movlw	3
   734   000A18  6E14               	movwf	set_usart_response@res_len^0,c
   735   000A1A  EC12  F005         	call	_set_usart_response	;wreg free
   736   000A1E  EFEB  F004         	goto	i2l990
   737   000A22                     i2l72:
   738   000A22  0012               	return		;funcret
   739   000A24                     __end_of_switch_cmd:
   740                           	callstack 0
   741                           
   742 ;; *************** function _strncmp *****************
   743 ;; Defined at:
   744 ;;		line 4 in file "/home/hidden02/software/xc8/v2.41/v2.41/pic/sources/c90/common/strncmp.c"
   745 ;; Parameters:    Size  Location     Type
   746 ;;  s1              2    0[COMRAM] PTR const unsigned char 
   747 ;;		 -> rx_buffer(5), 
   748 ;;  s2              2    2[COMRAM] PTR const unsigned char 
   749 ;;		 -> STR_5(6), STR_2(6), 
   750 ;;  len             2    4[COMRAM] unsigned int 
   751 ;; Auto vars:     Size  Location     Type
   752 ;;		None
   753 ;; Return value:  Size  Location     Type
   754 ;;                  2    0[COMRAM] int 
   755 ;; Registers used:
   756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   757 ;; Tracked objects:
   758 ;;		On entry : 0/0
   759 ;;		On exit  : 0/0
   760 ;;		Unchanged: 0/0
   761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   762 ;;      Params:         6       0       0       0       0       0       0       0       0
   763 ;;      Locals:         0       0       0       0       0       0       0       0       0
   764 ;;      Temps:          1       0       0       0       0       0       0       0       0
   765 ;;      Totals:         7       0       0       0       0       0       0       0       0
   766 ;;Total ram usage:        7 bytes
   767 ;; Hardware stack levels used: 1
   768 ;; This function calls:
   769 ;;		Nothing
   770 ;; This function is called by:
   771 ;;		_switch_cmd
   772 ;; This function uses a non-reentrant model
   773 ;;
   774                           
   775                           	psect	text6
   776   000900                     __ptext6:
   777                           	callstack 0
   778   000900                     _strncmp:
   779                           	callstack 27
   780   000900  EFB9  F004         	goto	i2l978
   781   000904                     i2l968:
   782   000904  C012  FFD9         	movff	strncmp@s1,fsr2l
   783   000908  C013  FFDA         	movff	strncmp@s1+1,fsr2h
   784   00090C  50DF               	movf	indf2,w,c
   785   00090E  B4D8               	btfsc	status,2,c
   786   000910  EF8C  F004         	goto	i2u19_41
   787   000914  EF8E  F004         	goto	i2u19_40
   788   000918                     i2u19_41:
   789   000918  EFA2  F004         	goto	i2l972
   790   00091C                     i2u19_40:
   791   00091C  C012  FFD9         	movff	strncmp@s1,fsr2l
   792   000920  C013  FFDA         	movff	strncmp@s1+1,fsr2h
   793   000924  50DF               	movf	indf2,w,c
   794   000926  6E18               	movwf	??_strncmp^0,c
   795   000928  C014  FFF6         	movff	strncmp@s2,tblptrl
   796   00092C  C015  FFF7         	movff	strncmp@s2+1,tblptrh
   797   000930                     	if	0	;tblptru may be non-zero
   798   000930                     	endif
   799   000930                     	if	0	;tblptru may be non-zero
   800   000930                     	endif
   801   000930  0008               	tblrd		*
   802   000932  50F5               	movf	tablat,w,c
   803   000934  1818               	xorwf	??_strncmp^0,w,c
   804   000936  B4D8               	btfsc	status,2,c
   805   000938  EFA0  F004         	goto	i2u20_41
   806   00093C  EFA2  F004         	goto	i2u20_40
   807   000940                     i2u20_41:
   808   000940  EFB5  F004         	goto	i2l976
   809   000944                     i2u20_40:
   810   000944                     i2l972:
   811   000944  C012  FFD9         	movff	strncmp@s1,fsr2l
   812   000948  C013  FFDA         	movff	strncmp@s1+1,fsr2h
   813   00094C  50DF               	movf	indf2,w,c
   814   00094E  6E18               	movwf	??_strncmp^0,c
   815   000950  C014  FFF6         	movff	strncmp@s2,tblptrl
   816   000954  C015  FFF7         	movff	strncmp@s2+1,tblptrh
   817   000958                     	if	0	;tblptru may be non-zero
   818   000958                     	endif
   819   000958                     	if	0	;tblptru may be non-zero
   820   000958                     	endif
   821   000958  0008               	tblrd		*
   822   00095A  50F5               	movf	tablat,w,c
   823   00095C  5C18               	subwf	??_strncmp^0,w,c
   824   00095E  6E12               	movwf	?_strncmp^0,c
   825   000960  6A13               	clrf	(?_strncmp+1)^0,c
   826   000962  A0D8               	btfss	status,0,c
   827   000964  0613               	decf	(?_strncmp+1)^0,f,c
   828   000966  EFCA  F004         	goto	i2l763
   829   00096A                     i2l976:
   830   00096A  4A12               	infsnz	strncmp@s1^0,f,c
   831   00096C  2A13               	incf	(strncmp@s1+1)^0,f,c
   832   00096E  4A14               	infsnz	strncmp@s2^0,f,c
   833   000970  2A15               	incf	(strncmp@s2+1)^0,f,c
   834   000972                     i2l978:
   835   000972  0616               	decf	strncmp@len^0,f,c
   836   000974  A0D8               	btfss	status,0,c
   837   000976  0617               	decf	(strncmp@len+1)^0,f,c
   838   000978  2816               	incf	strncmp@len^0,w,c
   839   00097A  E106               	bnz	i2u21_41
   840   00097C  2817               	incf	(strncmp@len+1)^0,w,c
   841   00097E  A4D8               	btfss	status,2,c
   842   000980  EFC4  F004         	goto	i2u21_41
   843   000984  EFC6  F004         	goto	i2u21_40
   844   000988                     i2u21_41:
   845   000988  EF82  F004         	goto	i2l968
   846   00098C                     i2u21_40:
   847   00098C  0E00               	movlw	0
   848   00098E  6E13               	movwf	(?_strncmp+1)^0,c
   849   000990  0E00               	movlw	0
   850   000992  6E12               	movwf	?_strncmp^0,c
   851   000994                     i2l763:
   852   000994  0012               	return		;funcret
   853   000996                     __end_of_strncmp:
   854                           	callstack 0
   855                           
   856 ;; *************** function _start_tx *****************
   857 ;; Defined at:
   858 ;;		line 56 in file "main.c"
   859 ;; Parameters:    Size  Location     Type
   860 ;;		None
   861 ;; Auto vars:     Size  Location     Type
   862 ;;		None
   863 ;; Return value:  Size  Location     Type
   864 ;;                  1    wreg      void 
   865 ;; Registers used:
   866 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   867 ;; Tracked objects:
   868 ;;		On entry : 0/0
   869 ;;		On exit  : 0/0
   870 ;;		Unchanged: 0/0
   871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   872 ;;      Params:         0       0       0       0       0       0       0       0       0
   873 ;;      Locals:         0       0       0       0       0       0       0       0       0
   874 ;;      Temps:          0       0       0       0       0       0       0       0       0
   875 ;;      Totals:         0       0       0       0       0       0       0       0       0
   876 ;;Total ram usage:        0 bytes
   877 ;; Hardware stack levels used: 1
   878 ;; This function calls:
   879 ;;		Nothing
   880 ;; This function is called by:
   881 ;;		_switch_cmd
   882 ;; This function uses a non-reentrant model
   883 ;;
   884                           
   885                           	psect	text7
   886   000AF8                     __ptext7:
   887                           	callstack 0
   888   000AF8                     _start_tx:
   889                           	callstack 27
   890   000AF8                     
   891                           ;main.c: 57:     tx_buffer_ptr = 0;
   892   000AF8  0E00               	movlw	0
   893   000AFA  6E0B               	movwf	_tx_buffer_ptr^0,c
   894   000AFC                     
   895                           ;main.c: 58:     TXREG = tx_buffer[tx_buffer_ptr];
   896   000AFC  0E01               	movlw	low _tx_buffer
   897   000AFE  240B               	addwf	_tx_buffer_ptr^0,w,c
   898   000B00  6ED9               	movwf	fsr2l,c
   899   000B02  6ADA               	clrf	fsr2h,c
   900   000B04  0E00               	movlw	high _tx_buffer
   901   000B06  22DA               	addwfc	fsr2h,f,c
   902   000B08  50DF               	movf	indf2,w,c
   903   000B0A  6EAD               	movwf	173,c	;volatile
   904   000B0C                     
   905                           ;main.c: 59:     tx_buffer_ptr++;
   906   000B0C  2A0B               	incf	_tx_buffer_ptr^0,f,c
   907   000B0E                     
   908                           ;main.c: 60:     TXSTAbits.TXEN = 1;
   909   000B0E  8AAC               	bsf	172,5,c	;volatile
   910   000B10  0012               	return		;funcret
   911   000B12                     __end_of_start_tx:
   912                           	callstack 0
   913                           
   914 ;; *************** function _set_usart_response *****************
   915 ;; Defined at:
   916 ;;		line 47 in file "main.c"
   917 ;; Parameters:    Size  Location     Type
   918 ;;  res             2    0[COMRAM] PTR unsigned char 
   919 ;;		 -> STR_6(4), STR_3(4), 
   920 ;;  res_len         1    2[COMRAM] unsigned char 
   921 ;; Auto vars:     Size  Location     Type
   922 ;;  i               1    5[COMRAM] unsigned char 
   923 ;; Return value:  Size  Location     Type
   924 ;;                  1    wreg      void 
   925 ;; Registers used:
   926 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   932 ;;      Params:         3       0       0       0       0       0       0       0       0
   933 ;;      Locals:         1       0       0       0       0       0       0       0       0
   934 ;;      Temps:          2       0       0       0       0       0       0       0       0
   935 ;;      Totals:         6       0       0       0       0       0       0       0       0
   936 ;;Total ram usage:        6 bytes
   937 ;; Hardware stack levels used: 1
   938 ;; This function calls:
   939 ;;		Nothing
   940 ;; This function is called by:
   941 ;;		_switch_cmd
   942 ;; This function uses a non-reentrant model
   943 ;;
   944                           
   945                           	psect	text8
   946   000A24                     __ptext8:
   947                           	callstack 0
   948   000A24                     _set_usart_response:
   949                           	callstack 27
   950   000A24                     
   951                           ;main.c: 48:     for(char i = 0; i < 10; i++){
   952   000A24  0E00               	movlw	0
   953   000A26  6E17               	movwf	set_usart_response@i^0,c
   954   000A28                     i2l956:
   955                           
   956                           ;main.c: 49:         if(res[i] == '\0' || i >= res_len)
   957   000A28  5017               	movf	set_usart_response@i^0,w,c
   958   000A2A  2412               	addwf	set_usart_response@res^0,w,c
   959   000A2C  6E15               	movwf	??_set_usart_response^0,c
   960   000A2E  0E00               	movlw	0
   961   000A30  2013               	addwfc	(set_usart_response@res+1)^0,w,c
   962   000A32  6E16               	movwf	(??_set_usart_response+1)^0,c
   963   000A34  C015  FFF6         	movff	??_set_usart_response,tblptrl
   964   000A38  C016  FFF7         	movff	??_set_usart_response+1,tblptrh
   965   000A3C                     	if	0	;tblptru may be non-zero
   966   000A3C                     	endif
   967   000A3C                     	if	0	;tblptru may be non-zero
   968   000A3C                     	endif
   969   000A3C  0008               	tblrd		*
   970   000A3E  50F5               	movf	tablat,w,c
   971   000A40  0900               	iorlw	0
   972   000A42  B4D8               	btfsc	status,2,c
   973   000A44  EF26  F005         	goto	i2u16_41
   974   000A48  EF28  F005         	goto	i2u16_40
   975   000A4C                     i2u16_41:
   976   000A4C  EF4F  F005         	goto	i2l63
   977   000A50                     i2u16_40:
   978   000A50  5014               	movf	set_usart_response@res_len^0,w,c
   979   000A52  5C17               	subwf	set_usart_response@i^0,w,c
   980   000A54  A0D8               	btfss	status,0,c
   981   000A56  EF2F  F005         	goto	i2u17_41
   982   000A5A  EF31  F005         	goto	i2u17_40
   983   000A5E                     i2u17_41:
   984   000A5E  EF33  F005         	goto	i2l960
   985   000A62                     i2u17_40:
   986   000A62  EF4F  F005         	goto	i2l63
   987   000A66                     i2l960:
   988                           
   989                           ;main.c: 51:         tx_buffer[i] = res[i];
   990   000A66  5017               	movf	set_usart_response@i^0,w,c
   991   000A68  2412               	addwf	set_usart_response@res^0,w,c
   992   000A6A  6E15               	movwf	??_set_usart_response^0,c
   993   000A6C  0E00               	movlw	0
   994   000A6E  2013               	addwfc	(set_usart_response@res+1)^0,w,c
   995   000A70  6E16               	movwf	(??_set_usart_response+1)^0,c
   996   000A72  C015  FFF6         	movff	??_set_usart_response,tblptrl
   997   000A76  C016  FFF7         	movff	??_set_usart_response+1,tblptrh
   998   000A7A                     	if	0	;tblptru may be non-zero
   999   000A7A                     	endif
  1000   000A7A                     	if	0	;tblptru may be non-zero
  1001   000A7A                     	endif
  1002   000A7A  0E01               	movlw	low _tx_buffer
  1003   000A7C  2417               	addwf	set_usart_response@i^0,w,c
  1004   000A7E  6ED9               	movwf	fsr2l,c
  1005   000A80  6ADA               	clrf	fsr2h,c
  1006   000A82  0E00               	movlw	high _tx_buffer
  1007   000A84  22DA               	addwfc	fsr2h,f,c
  1008   000A86  0008               	tblrd		*
  1009   000A88  CFF5 FFDF          	movff	tablat,indf2
  1010   000A8C                     
  1011                           ;main.c: 52:     }
  1012   000A8C  2A17               	incf	set_usart_response@i^0,f,c
  1013   000A8E  0E09               	movlw	9
  1014   000A90  6417               	cpfsgt	set_usart_response@i^0,c
  1015   000A92  EF4D  F005         	goto	i2u18_41
  1016   000A96  EF4F  F005         	goto	i2u18_40
  1017   000A9A                     i2u18_41:
  1018   000A9A  EF14  F005         	goto	i2l956
  1019   000A9E                     i2u18_40:
  1020   000A9E                     i2l63:
  1021   000A9E  0012               	return		;funcret
  1022   000AA0                     __end_of_set_usart_response:
  1023                           	callstack 0
  1024                           
  1025                           	psect	rparam
  1026   000000                     
  1027                           	psect	temp
  1028   00002B                     btemp:
  1029                           	callstack 0
  1030   00002B                     	ds	1
  1031   000000                     int$flags	set	btemp
  1032   000000                     wtemp8	set	btemp+1
  1033   000000                     ttemp5	set	btemp+1
  1034   000000                     ttemp6	set	btemp+4
  1035   000000                     ttemp7	set	btemp+8
  1036                           
  1037                           	psect	config
  1038                           
  1039                           ;Config register CONFIG1L @ 0x300000
  1040                           ;	PLL Prescaler Selection bits
  1041                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  1042                           ;	System Clock Postscaler Selection bits
  1043                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1044                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1045                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  1046   300000                     	org	3145728
  1047   300000  00                 	db	0
  1048                           
  1049                           ;Config register CONFIG1H @ 0x300001
  1050                           ;	Oscillator Selection bits
  1051                           ;	FOSC = HS, HS oscillator (HS)
  1052                           ;	Fail-Safe Clock Monitor Enable bit
  1053                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1054                           ;	Internal/External Oscillator Switchover bit
  1055                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1056   300001                     	org	3145729
  1057   300001  0C                 	db	12
  1058                           
  1059                           ;Config register CONFIG2L @ 0x300002
  1060                           ;	Power-up Timer Enable bit
  1061                           ;	PWRT = OFF, PWRT disabled
  1062                           ;	Brown-out Reset Enable bits
  1063                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  1064                           ;	Brown-out Reset Voltage bits
  1065                           ;	BORV = 3, Minimum setting 2.05V
  1066                           ;	USB Voltage Regulator Enable bit
  1067                           ;	VREGEN = OFF, USB voltage regulator disabled
  1068   300002                     	org	3145730
  1069   300002  1F                 	db	31
  1070                           
  1071                           ;Config register CONFIG2H @ 0x300003
  1072                           ;	Watchdog Timer Enable bit
  1073                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1074                           ;	Watchdog Timer Postscale Select bits
  1075                           ;	WDTPS = 32768, 1:32768
  1076   300003                     	org	3145731
  1077   300003  1E                 	db	30
  1078                           
  1079                           ; Padding undefined space
  1080   300004                     	org	3145732
  1081   300004  FF                 	db	255
  1082                           
  1083                           ;Config register CONFIG3H @ 0x300005
  1084                           ;	CCP2 MUX bit
  1085                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1086                           ;	PORTB A/D Enable bit
  1087                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  1088                           ;	Low-Power Timer 1 Oscillator Enable bit
  1089                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1090                           ;	MCLR Pin Enable bit
  1091                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1092   300005                     	org	3145733
  1093   300005  83                 	db	131
  1094                           
  1095                           ;Config register CONFIG4L @ 0x300006
  1096                           ;	Stack Full/Underflow Reset Enable bit
  1097                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1098                           ;	Single-Supply ICSP Enable bit
  1099                           ;	LVP = OFF, Single-Supply ICSP disabled
  1100                           ;	Extended Instruction Set Enable bit
  1101                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1102                           ;	Background Debugger Enable bit
  1103                           ;	DEBUG = 0x1, unprogrammed default
  1104   300006                     	org	3145734
  1105   300006  81                 	db	129
  1106                           
  1107                           ; Padding undefined space
  1108   300007                     	org	3145735
  1109   300007  FF                 	db	255
  1110                           
  1111                           ;Config register CONFIG5L @ 0x300008
  1112                           ;	Code Protection bit
  1113                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1114                           ;	Code Protection bit
  1115                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1116                           ;	Code Protection bit
  1117                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1118                           ;	Code Protection bit
  1119                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1120   300008                     	org	3145736
  1121   300008  0F                 	db	15
  1122                           
  1123                           ;Config register CONFIG5H @ 0x300009
  1124                           ;	Boot Block Code Protection bit
  1125                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1126                           ;	Data EEPROM Code Protection bit
  1127                           ;	CPD = OFF, Data EEPROM is not code-protected
  1128   300009                     	org	3145737
  1129   300009  C0                 	db	192
  1130                           
  1131                           ;Config register CONFIG6L @ 0x30000A
  1132                           ;	Write Protection bit
  1133                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1134                           ;	Write Protection bit
  1135                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1136                           ;	Write Protection bit
  1137                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1138                           ;	Write Protection bit
  1139                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1140   30000A                     	org	3145738
  1141   30000A  0F                 	db	15
  1142                           
  1143                           ;Config register CONFIG6H @ 0x30000B
  1144                           ;	Configuration Register Write Protection bit
  1145                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1146                           ;	Boot Block Write Protection bit
  1147                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1148                           ;	Data EEPROM Write Protection bit
  1149                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1150   30000B                     	org	3145739
  1151   30000B  E0                 	db	224
  1152                           
  1153                           ;Config register CONFIG7L @ 0x30000C
  1154                           ;	Table Read Protection bit
  1155                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1156                           ;	Table Read Protection bit
  1157                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1158                           ;	Table Read Protection bit
  1159                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1160                           ;	Table Read Protection bit
  1161                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1162   30000C                     	org	3145740
  1163   30000C  0F                 	db	15
  1164                           
  1165                           ;Config register CONFIG7H @ 0x30000D
  1166                           ;	Boot Block Table Read Protection bit
  1167                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1168   30000D                     	org	3145741
  1169   30000D  40                 	db	64
  1170                           tosu	equ	0xFFF
  1171                           tosh	equ	0xFFE
  1172                           tosl	equ	0xFFD
  1173                           stkptr	equ	0xFFC
  1174                           pclatu	equ	0xFFB
  1175                           pclath	equ	0xFFA
  1176                           pcl	equ	0xFF9
  1177                           tblptru	equ	0xFF8
  1178                           tblptrh	equ	0xFF7
  1179                           tblptrl	equ	0xFF6
  1180                           tablat	equ	0xFF5
  1181                           prodh	equ	0xFF4
  1182                           prodl	equ	0xFF3
  1183                           indf0	equ	0xFEF
  1184                           postinc0	equ	0xFEE
  1185                           postdec0	equ	0xFED
  1186                           preinc0	equ	0xFEC
  1187                           plusw0	equ	0xFEB
  1188                           fsr0h	equ	0xFEA
  1189                           fsr0l	equ	0xFE9
  1190                           wreg	equ	0xFE8
  1191                           indf1	equ	0xFE7
  1192                           postinc1	equ	0xFE6
  1193                           postdec1	equ	0xFE5
  1194                           preinc1	equ	0xFE4
  1195                           plusw1	equ	0xFE3
  1196                           fsr1h	equ	0xFE2
  1197                           fsr1l	equ	0xFE1
  1198                           bsr	equ	0xFE0
  1199                           indf2	equ	0xFDF
  1200                           postinc2	equ	0xFDE
  1201                           postdec2	equ	0xFDD
  1202                           preinc2	equ	0xFDC
  1203                           plusw2	equ	0xFDB
  1204                           fsr2h	equ	0xFDA
  1205                           fsr2l	equ	0xFD9
  1206                           status	equ	0xFD8

Data Sizes:
    Strings     16
    Constant    0
    Data        10
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     15      42
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_5(CODE[6]), STR_2(CODE[6]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> rx_buffer(COMRAM[5]), 

    switch_cmd@ptr	PTR unsigned char  size(2) Largest target is 5
		 -> rx_buffer(COMRAM[5]), 

    set_usart_response@res	PTR unsigned char  size(2) Largest target is 4
		 -> STR_6(CODE[4]), STR_3(CODE[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _tcInt in COMRAM

    _tcInt->_switch_cmd
    _switch_cmd->_strncmp

Critical Paths under _main in BANK0

    None.

Critical Paths under _tcInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tcInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tcInt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tcInt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _tcInt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _tcInt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _tcInt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _tcInt in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                     _interrupt_conf
                         _ports_conf
                         _usart_conf
 ---------------------------------------------------------------------------------
 (1) _usart_conf                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ports_conf                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interrupt_conf                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _tcInt                                                6     6      0    1214
                                              9 COMRAM     6     6      0
                         _switch_cmd
 ---------------------------------------------------------------------------------
 (3) _switch_cmd                                           2     0      2    1214
                                              7 COMRAM     2     0      2
                 _set_usart_response
                           _start_tx
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              7     1      6     590
                                              0 COMRAM     7     1      6
 ---------------------------------------------------------------------------------
 (4) _start_tx                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _set_usart_response                                   6     3      3     504
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _interrupt_conf
   _ports_conf
   _usart_conf

 _tcInt (ROOT)
   _switch_cmd
     _set_usart_response
     _start_tx
     _strncmp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      28        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      F      2A       1       44.7%
BITBIGSFRhhhl       37      0       0      21        0.0%
BITBIGSFRll         21      0       0      26        0.0%
BITBIGSFRlh         11      0       0      25        0.0%
BITBIGSFRhhhh        D      0       0      20        0.0%
BITBIGSFRhlh         C      0       0      23        0.0%
BITBIGSFRhll         8      0       0      24        0.0%
BITBIGSFRhhlh        7      0       0      22        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2A      27        0.0%
DATA                 0      0      2A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sun Aug  6 02:23:22 2023

                        l52 0B36                          l55 0B46                          l49 0AF6  
                        l77 0B1E                          l78 0B1E               _rx_buffer_ptr 000C  
    __end_of_interrupt_conf 0B38                         l900 0B42                         l918 0B12  
                       l892 0ADE                         l896 0B26                         wreg 0FE8  
                      STR_1 0801                        STR_2 0801                        STR_3 080D  
                      STR_4 0807                        STR_5 0807                        STR_6 080D  
                      _PIE1 0F9D                        i2l63 0A9E                        i2l72 0A22  
                      i2l66 0B10                        i2l93 08E4                        i2l85 087E  
                      _main 0B12                        fsr2h 0FDA                        indf2 0FDF  
                      fsr1l 0FE1                        fsr2l 0FD9                        btemp 002B  
                      start 000E                ___param_bank 0000                       ?_main 0012  
           ?_interrupt_conf 0012                       i2l763 0994                       i2l950 0A24  
                     i2l870 0B0C                       i2l960 0A66                       i2l872 0B0E  
                     i2l962 0A8C                       i2l866 0AF8                       i2l970 091C  
                     i2l964 0A8E                       i2l956 0A28                       i2l868 0AFC  
                     i2l980 098C                       i2l972 0944                       i2l958 0A50  
                     i2l966 0900                       i2l990 09D6                       i2l976 096A  
                     i2l968 0904                       i2l992 09DE                       i2l984 0996  
                     i2l978 0972                       i2l994 0A0C                       i2l986 09C4  
                     i2l996 0A0E                       i2l988 09C6                       _RCREG 0FAE  
                     _RCSTA 0FAB                       _SPBRG 0FAF                       _TRISB 0F93  
                     _TRISC 0F94                       _TXREG 0FAD                       _TXSTA 0FAC  
                     _tcInt 0008                       tablat 0FF5                       ttemp5 002C  
                     ttemp6 002F                       ttemp7 0033                       status 0FD8  
                     wtemp8 002C             __end_of_strncmp 0996             __initialization 0AA0  
              __end_of_main 0B26               _tx_buffer_ptr 000B                      ??_main 0021  
             __activetblptr 0001                      ?_tcInt 0012                      i2l1000 082C  
                    i2l1010 086A                      i2l1002 083A                      i2l1020 08AC  
                    i2l1012 086E                      i2l1004 0848                      i2l1022 08C8  
                    i2l1014 088C                      i2l1006 0858                      i2l1024 08CC  
                    i2l1016 089A                      i2l1008 085A                      i2l1026 08D2  
                    i2l1018 089C                      i2l1028 08E2                      _INTCON 0FF2  
                    _SPBRGH 0FB0                      clear_0 0AC6                      isa$std 0001  
              __pdataCOMRAM 0021                __mediumconst 0000                      tblptrh 0FF7  
                    tblptrl 0FF6                      tblptru 0FF8            __end_of_start_tx 0B12  
__end_of_set_usart_response 0AA0                   ??_strncmp 0018                  __accesstop 0060  
   __end_of__initialization 0ACC               ___rparam_used 0001              __pcstackCOMRAM 0012  
             __end_of_tcInt 0900                     ??_tcInt 001B            ??_interrupt_conf 0021  
                   _BAUDCON 0FB8                     _INTCON2 0FF1                     _INTCON3 0FF0  
                   i2u20_40 0944                     i2u20_41 0940                     i2u21_40 098C  
                   i2u21_41 0988                     i2u22_40 09C4                     i2u30_40 08C8  
                   i2u22_41 09C0                     i2u30_41 08C4                     i2u23_40 0A0C  
                   i2u23_41 0A08                     i2u16_40 0A50                     i2u24_40 083A  
                   i2u16_41 0A4C                     i2u24_41 0836                     i2u17_40 0A62  
                   i2u25_40 0848                     i2u17_41 0A5E                     i2u25_41 0844  
                   i2u18_40 0A9E                     i2u26_40 086A                     i2u18_41 0A9A  
                   i2u26_41 0866                     i2u19_40 091C                     i2u27_40 088C  
                   i2u19_41 0918                     i2u27_41 0888                     i2u28_40 089A  
                   i2u28_41 0896                     i2u29_40 08AC                     i2u29_41 08A8  
                   __Hparam 0000                     __Lparam 0000   set_usart_response@res_len 0014  
              __psmallconst 0800                   ?_start_tx 0012                     __pcinit 0AA0  
                   __ramtop 0800         set_usart_response@i 0017                     __ptext0 0B12  
                   __ptext1 0ADE                     __ptext2 0B42                     __ptext3 0B26  
                   __ptext5 0996                     __ptext6 0900                     __ptext7 0AF8  
                   __ptext8 0A24                     _strncmp 0900              __pintcode_body 0812  
      end_of_initialization 0ACC                     int_func 0812                     postdec1 0FE5  
                   postinc0 0FEE                  ??_start_tx 0012                   _PORTBbits 0F81  
                _ports_conf 0B42                   _TXSTAbits 0FAC                  _usart_conf 0ADE  
        _set_usart_response 0A24                  _switch_cmd 0996               __pidataCOMRAM 0B38  
       ?_set_usart_response 0012         start_initialization 0AA0        ??_set_usart_response 0015  
               __pbssCOMRAM 0001                 ?_ports_conf 0012                 ?_usart_conf 0012  
               ?_switch_cmd 0019                   __pintcode 0008       set_usart_response@res 0012  
               __smallconst 0800                    ?_strncmp 0012                    _PIE1bits 0F9D  
                  _PIR1bits 0F9E                   _rx_buffer 000D                   _tx_buffer 0001  
                 copy_data0 0AB4                    __Hrparam 0000                    __Lrparam 0000  
              __Lsmallconst 0800               switch_cmd@ptr 0019                  strncmp@len 0016  
                  isa$xinst 0000                    _response 0021                    int$flags 002B  
                  _start_tx 0AF8                ??_ports_conf 0021                    intlevel2 0000  
              ??_usart_conf 0021                   strncmp@s1 0012                   strncmp@s2 0014  
              ??_switch_cmd 001B          __end_of_ports_conf 0B48              _interrupt_conf 0B26  
        __end_of_usart_conf 0AF8          __end_of_switch_cmd 0A24  
